require 'rails_helper'
require 'super_awesome_print'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe Api::CartsController, type: :controller do

  let!(:user) { create(:spree_user) }
  let!(:other_user) { create(:spree_user) }

  let!(:user_token) {
    user.generate_spree_api_key!
    user.spree_api_key
  }

  let!(:other_user_token) {
    other_user.generate_spree_api_key!
    other_user.spree_api_key
  }

  let!(:cart) {
    create(:cart, spree_user: user)
  }

  # This should return the minimal set of attributes required to create a valid
  # UserPer. As you add validations to UserPer, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
  }

  let(:invalid_attributes) {
    {}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UserPersController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  render_views

  before do
    request.headers['X-Spree-Token'] = user_token
  end

  describe "GET #user_cart" do

    context "with cart already created" do
      it "returns the cart" do
        get :user_cart, {}, valid_session
        json_resp = JSON.parse response.body
        expect(assigns(:cart)).to eql(cart)
        expect(json_resp['id']).to eql(cart.id)
        expect(json_resp['spree_user_id']).to eql(cart.spree_user_id)
      end

      it "doesn`t create other cart object" do
        expect {
          get :user_cart, {}, valid_session
        }.not_to change(
          Cart, :count
        )
      end
    end

    context "without cart already created" do
      before do
        request.headers['X-Spree-Token'] = other_user_token
      end

      it "returns other cart" do
        get :user_cart, {}, valid_session
        expect(assigns(:cart)).not_to eql(cart)
        expect(assigns(:cart)).to be_a(Cart)
      end

      it "creates other cart object" do
        expect {
          get :user_cart, {}, valid_session
        }.to change(
          Cart, :count
        ).by(1)
      end
    end

    # context "with user_per from other user" do
    #   it "assigns all user_pers as @user_pers" do
    #     user_per = UserPerService.create valid_attributes.merge(spree_user_id: other_user.id)
    #     get :index, {}, valid_session
    #     expect(assigns(:user_pers)).to eq([])
    #   end
    # end
  end

  # describe "POST #create" do
  #   context "with valid params" do
  #     it "creates a new UserPer" do
  #       expect {
  #         post :create, {:user_per => valid_attributes, format: :json}, valid_session
  #       }.to change(UserPer, :count).by(1)
  #     end
  #
  #     it "creates a new UserPerPer" do
  #       expect {
  #         post :create, {:user_per => valid_attributes, format: :json}, valid_session
  #       }.to change(UserPerPer, :count).by(1)
  #     end
  #
  #     it "creates a new UserAreaPer" do
  #       expect {
  #         post :create, {:user_per => valid_attributes, format: :json}, valid_session
  #       }.to change(UserAreaPer, :count).by(1)
  #     end
  #
  #     it "assigns a newly created user_per as @user_per" do
  #       post :create, {:user_per => valid_attributes, format: :json}, valid_session
  #       expect(assigns(:user_per)).to be_a(UserPer)
  #       expect(assigns(:user_per)).to be_persisted
  #       expect(assigns(:user_per).spree_user).to eq(user)
  #     end
  #   end
  # end

end
