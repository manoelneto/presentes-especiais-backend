require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe Api::UserPersController, type: :controller do

  let!(:theme) { create(:theme) }
  let!(:user) { create(:spree_user) }
  let!(:other_user) { create(:spree_user) }
  let!(:layout) { create(:layout) }
  let!(:personalization) {
    personalization = create(:personalization)
    personalization.remote_picture_url = 'https://bitbucket-assetroot.s3.amazonaws.com/c/photos/2015/Feb/03/1243707132-0-borglab-jenkins-avatar.png'
    personalization.save
    personalization
  }

  let!(:user_token) {
    user.generate_spree_api_key!
    user.spree_api_key
  }

  # This should return the minimal set of attributes required to create a valid
  # UserPer. As you add validations to UserPer, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      :spree_user_id => user.id,
      :theme_id => theme.id,
      :user_per_pers_attributes => [
        {
          :layout_id => layout.id,
          :personalization_id => personalization.id,
          :user_area_pers_attributes => [
            {
              :x1 => 10,
              :x2 => 10,
              :y1 => 50,
              :y2 => 50,
              :area_type => "text",
              :text => "Qualquer texto"
            }
          ]
        }
      ]
    }
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UserPersController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  render_views

  before do
    request.headers['X-Spree-Token'] = user_token
  end

  describe "GET #index" do

    context "with user_per from same user" do
      it "assigns all user_pers as @user_pers" do
        user_per = UserPerService.create valid_attributes
        get :index, {}, valid_session
        expect(assigns(:user_pers)).to eq([user_per])
        # sap JSON.parse response.body
      end
    end

    context "with user_per from other user" do
      it "assigns all user_pers as @user_pers" do
        user_per = UserPerService.create valid_attributes.merge(spree_user_id: other_user.id)
        get :index, {}, valid_session
        expect(assigns(:user_pers)).to eq([])
      end
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new UserPer" do
        expect {
          post :create, {:user_per => valid_attributes, format: :json}, valid_session
        }.to change(UserPer, :count).by(1)
      end

      it "creates a new UserPerPer" do
        expect {
          post :create, {:user_per => valid_attributes, format: :json}, valid_session
        }.to change(UserPerPer, :count).by(1)
      end

      it "creates a new UserAreaPer" do
        expect {
          post :create, {:user_per => valid_attributes, format: :json}, valid_session
        }.to change(UserAreaPer, :count).by(1)
      end

      it "assigns a newly created user_per as @user_per" do
        post :create, {:user_per => valid_attributes, format: :json}, valid_session
        expect(assigns(:user_per)).to be_a(UserPer)
        expect(assigns(:user_per)).to be_persisted
        expect(assigns(:user_per).spree_user).to eq(user)
      end
    end
  end

end
